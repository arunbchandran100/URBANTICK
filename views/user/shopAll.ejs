<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="style.css" />
  <title>Shop All</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>

<body class="bg-gray-100">
  <%- include("partials/navBar") %>
    <div class="mt-16"></div>

    <!-- Page Content -->
    <div class="py-12 bg-gray-50">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 class="text-3xl font-bold text-gray-900 mb-8 text-center">
          Shop All
        </h2>

        <div class="flex flex-col md:flex-row gap-8">
          <!-- Left Sidebar - Filters -->
          <div class="md:w-1/4">
            <div class="sticky top-4 space-y-6 bg-white p-6 rounded-lg shadow-sm">
              <!-- Search Bar -->
              <div class="mb-6">
                <input type="text" id="searchInput"
                  class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Search products..." />
              </div>

              <!-- Sorting Section -->
              <div class="mb-6">
                <label for="sortFilter" class="block text-gray-700 font-medium mb-2">Sort By</label>
                <select id="sortFilter"
                  class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                  <option value="default">Default</option>
                  <option value="priceLowToHigh">Price: Low to High</option>
                  <option value="priceHighToLow">Price: High to Low</option>
                  <option value="ratingHighToLow">Rating: High to Low</option>
                  <option value="newArrivals">New Arrivals</option>
                </select>
              </div>

              <!-- Filter Section -->
              <div class="space-y-4">
                <div>
                  <label for="gender" class="block text-gray-700 font-medium mb-2">Gender</label>
                  <select id="gender"
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">All</option>
                    <option value="male">Male</option>
                    <option value="female">Female</option>
                    <option value="unisex">Unisex</option>
                  </select>
                </div>

                <div>
                  <label for="category" class="block text-gray-700 font-medium mb-2">Category</label>
                  <select id="category"
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">All</option>
                  </select>
                </div>

                <div>
                  <label for="brand" class="block text-gray-700 font-medium mb-2">Brand</label>
                  <select id="brand"
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">All</option>
                  </select>
                </div>

                <div>
                  <label for="color" class="block text-gray-700 font-medium mb-2">Color</label>
                  <select id="color"
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">All</option>
                  </select>
                </div>

                <div>
                  <label class="block text-gray-700 font-medium mb-2">Price Range</label>
                  <div class="flex gap-2">
                    <input type="number" id="minPrice"
                      class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Min" />
                    <input type="number" id="maxPrice"
                      class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Max" />
                  </div>
                </div>

                <div>
                  <label for="stockFilter" class="block text-gray-700 font-medium mb-2">Stock Status</label>
                  <select id="stockFilter"
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">All Products</option>
                    <option value="inStock">In Stock</option>
                    <option value="outOfStock">Out of Stock</option>
                  </select>
                </div>
              </div>

              <!-- Reset Button -->
              <div class="mt-6">
                <button id="resetButton"
                  class="px-4 py-2 bg-zinc-800 text-white rounded-lg transform transition-transform duration-300 ease-in-out hover:bg-zinc-600 hover:scale-105 active:bg-zinc-700 active:scale-95">
                  Reset Filters
                </button>
              </div>

            </div>
          </div>

          <!-- Right Side - Product Grid -->
          <div class="md:w-3/4">
            <div id="productGrid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
              <!-- Dynamic product rendering here -->
              <% products.forEach(product=> { %>
                <div class="bg-white rounded-lg shadow-md p-4 flex flex-col">
                  <a href="/product/<%= product._id %>">
                    <img class="w-full h-auto rounded-lg mb-4" src="<%= product.imageUrl %>"
                      alt="<%= product.productName %>" />
                  </a>
                  <h3 class="text-lg font-semibold text-gray-800">
                    <span class="font-bold">
                      <%= product.brand %>
                    </span>
                    <span class="text-gray-800">
                      <%= product.productName %>
                    </span>
                  </h3>
                  <div>
                    <p class="ml-1 text-gray-800 font-medium">
                      <%= product.color  %>
                    </p>
                  </div>
                  <div class="text-yellow-500 flex items-center">
                    <i class="fa fa-star"></i>
                    <p class="ml-1 text-gray-800 font-medium">
                      <%= product.rating || 'No rating' %>
                    </p>
                  </div>

                  <% if (product.price && product.discountPrice) { %>
                    <div class="flex gap-2">
                      <div class="text-xl font-bold text-gray-900">
                        ₹<%= product.discountPrice %>
                      </div>
                      <div class="text-gray-500 line-through mt-1">
                        ₹<%= product.price %>
                      </div>
                    </div>
                    <% } else { %>
                      <div class="text-xl font-bold text-gray-900">
                        Price Not Available
                      </div>
                      <% } %>
                        <div class="flex justify-between items-center mt-4">
                          <a href="#" class="hover:text-slate-500"><i class="fa-regular fa-heart"></i></a>
                        </div>

                        <% if (product.stock> 0) { %>
                          <div class="mt-2 text-green-500"></div>
                          <% } else { %>
                            <div
                              class="mt-2 font-semibold text-red-600 bg-red-100 border border-red-600 rounded-lg p-2">
                              Out of Stock
                            </div>
                            <% } %>
                </div>
                <% }) %>
            </div>
          </div>
        </div>
      </div>
    </div>

    <%- include("partials/footer") %>
      <!-- ------------- -->

      <script>
        document.addEventListener("DOMContentLoaded", async () => {
          // Get all filter elements
          const elements = {
            brand: document.getElementById("brand"),
            color: document.getElementById("color"),
            category: document.getElementById("category"),
            gender: document.getElementById("gender"),
            stockFilter: document.getElementById("stockFilter"),
            sortFilter: document.getElementById("sortFilter"),
            minPrice: document.getElementById("minPrice"),
            maxPrice: document.getElementById("maxPrice"),
            searchInput: document.getElementById("searchInput"),
            productGrid: document.getElementById("productGrid")
          };

          // Fetch and populate filter options
          try {
            const response = await fetch("/products/filter-options");
            const data = await response.json();

            // Populate brand options
            if (data.brands) {
              data.brands.forEach(brand => {
                elements.brand.insertAdjacentHTML(
                  "beforeend",
                  `<option value="${brand}">${brand}</option>`
                );
              });
            }

            // Populate color options
            if (data.colors) {
              data.colors.forEach(color => {
                elements.color.insertAdjacentHTML(
                  "beforeend",
                  `<option value="${color}">${color}</option>`
                );
              });
            }

            // Populate category options
            if (data.categories) {
              data.categories.forEach(category => {
                elements.category.insertAdjacentHTML(
                  "beforeend",
                  `<option value="${category._id}">${category.categoriesName}</option>`
                );
              });
            }
          } catch (error) {
            console.error("Error fetching filter options:", error);
          }

          // Debounce function
          function debounce(func, wait) {
            let timeout;
            return function (...args) {
              clearTimeout(timeout);
              timeout = setTimeout(() => func.apply(this, args), wait);
            };
          }

          // Function to update products
          async function updateProducts() {
            try {
              // Get current values
              const filters = {
                gender: elements.gender.value,
                brand: elements.brand.value,
                color: elements.color.value,
                category: elements.category.value,
                minPrice: elements.minPrice.value,
                maxPrice: elements.maxPrice.value,
                stockStatus: elements.stockFilter.value,
                sort: elements.sortFilter.value
              };

              // Build query string
              const queryParams = new URLSearchParams();
              Object.entries(filters).forEach(([key, value]) => {
                if (value) queryParams.append(key, value);
              });

              // Make API call
              const response = await fetch(`/products/filter?${queryParams}`);
              const data = await response.json();

              if (!data.products) {
                console.error('No products returned');
                return;
              }

              // Update product grid
 elements.productGrid.innerHTML = '';
data.products.forEach(product => {
  const productCard = `
    <div class="bg-white rounded-lg shadow-md p-4 flex flex-col">
      <a href="/product/${product._id}">
        <img 
          class="w-full h-auto rounded-lg mb-4" 
          src="${product.imageUrl}" 
          alt="${product.productName}"
        />
      </a>
      <h3 class="text-lg font-semibold text-gray-800">
        <span class="font-bold">${product.brand}</span>
        <span class="text-gray-800">${product.productName}</span>
      </h3>
          <div>
          <p class="ml-1 text-gray-800 font-medium">
            ${ product.color }
          </p>
        </div>
      <div class="text-yellow-500 flex items-center">
        <i class="fa fa-star"></i>
        <p class="ml-1 text-gray-800 font-medium">
          ${product.rating || 'No rating'}
        </p>
      </div>
      ${product.price && product.discountPrice ? `
        <div class="flex gap-2">
          <div class="text-xl font-bold text-gray-900">₹${product.discountPrice}</div>
          <div class="text-gray-500 line-through mt-1">₹${product.price}</div>
        </div>
      ` : `
        <div class="text-xl font-bold text-gray-900">Price Not Available</div>
      `}
      ${product.stock > 0 ? `
        <div class="mt-2 text-green-500"></div>
      ` : `
        <div class="mt-2 font-semibold text-red-600 bg-red-100 border border-red-600 rounded-lg p-2">
          Out of Stock
        </div>
      `}
      <div class="flex justify-between items-center mt-4">
        <a href="#" class="hover:text-slate-500">
          <i class="fa-regular fa-heart"></i>
        </a>
      </div>
    </div>
  `;


                elements.productGrid.innerHTML += productCard;
              });
            } catch (error) {
              console.error("Error updating products:", error);
            }
          }

          // Add event listener for reset button
          const resetButton = document.getElementById("resetButton");
          resetButton.addEventListener("click", () => {
            // Reset filter elements
            elements.brand.value = "";
            elements.color.value = "";
            elements.category.value = "";
            elements.gender.value = "";
            elements.stockFilter.value = "";
            elements.sortFilter.value = "default";
            elements.minPrice.value = "";
            elements.maxPrice.value = "";
            elements.searchInput.value = "";

            // Update products with default filters
            updateProducts();

            // Add animation for button click
            resetButton.classList.add("animate-pulse");
            setTimeout(() => {
              resetButton.classList.remove("animate-pulse");
            }, 500);
          });


          // Handle search
          async function handleSearch() {
            try {
              const query = elements.searchInput.value.trim();
              if (!query) {
                await updateProducts(); // If search is empty, show all products
                return;
              }

              const response = await fetch(`/products/search?query=${query}`);
              const data = await response.json();

              if (!data.products) {
                console.error('No products returned from search');
                return;
              }

              // Update product grid with search results
              elements.productGrid.innerHTML = '';
              data.products.forEach(product => {
                const productCard = `
          <div class="bg-white rounded-lg shadow-md p-4 flex flex-col">
            <a href="/product/${product._id}">
              <img 
                class="w-full h-auto rounded-lg mb-4" 
                src="${product.imageUrl}" 
                alt="${product.productName}"
              />
            </a>
            <h3 class="text-lg font-semibold text-gray-800">
              <span class="font-bold">${product.brand}</span>
              <span class="text-gray-800">${product.productName}</span>
            </h3>
        <div>
          <p class="ml-1 text-gray-800 font-medium">
            ${ product.color }
          </p>
        </div>
            <div class="text-yellow-500 flex items-center">
              <i class="fa fa-star"></i>
              <p class="ml-1 text-gray-800 font-medium">
                ${product.rating || 'No rating'}
              </p>
            </div>
            ${product.price && product.discountPrice ? `
              <div class="flex gap-2">
                <div class="text-xl font-bold text-gray-900">₹${product.discountPrice}</div>
                <div class="text-gray-500 line-through mt-1">₹${product.price}</div>
              </div>
            ` : `
              <div class="text-xl font-bold text-gray-900">Price Not Available</div>
            `}
            <div class="flex justify-between items-center mt-4">
              <a href="#" class="hover:text-slate-500">
                <i class="fa-regular fa-heart"></i>
              </a>
            </div>
          </div>
        `;
                elements.productGrid.innerHTML += productCard;
              });
            } catch (error) {
              console.error("Error performing search:", error);
            }
          }

          // Debounced versions for search and price inputs
          const debouncedSearch = debounce(handleSearch, 300);
          const debouncedUpdateProducts = debounce(updateProducts, 300);

          // Add event listeners
          elements.searchInput.addEventListener('input', debouncedSearch);

          // Add event listeners for filters
          [
            elements.gender,
            elements.brand,
            elements.color,
            elements.category,
            elements.stockFilter,
            elements.sortFilter
          ].forEach(element => {
            element.addEventListener('change', updateProducts);
          });

          // Add event listeners for price inputs
          elements.minPrice.addEventListener('input', debouncedUpdateProducts);
          elements.maxPrice.addEventListener('input', debouncedUpdateProducts);
        });
      </script>






</body>

</html>