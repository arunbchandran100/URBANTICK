<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>My Account</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!-- Material Icons -->
    <link
      href="https://fonts.googleapis.com/icon?family=Material+Icons"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="style.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
      integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
  </head>
  <style>
    .text-red-500 {
      color: red;
    }

    .text-sm {
      font-size: 0.875rem;
    }
  </style>

  <body class="bg-gray-50">
    <%- include("partials/navBar") %>
    <div class="mt-16"></div>

    <div class="flex min-h-screen">
      <!-- Sidebar -->
      <%- include("partials/userProfileSideBar") %>

      <!-- Main Content -->
      <div id="user-profile" class="w-3/4 bg-white p-6 shadow-md">
        <h2 class="text-xl font-bold mb-6">Personal Information</h2>
        <form id="profile-form" class="space-y-4">
          <div>
            <label for="fullName" class="block text-gray-700">Full Name</label>
            <input
              type="text"
              id="fullName"
              name="fullName"
              value="<%= user.fullName %>"
              class="w-full px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <span id="fullNameError" class="text-red-500 text-sm"></span>
            <!-- Dynamic error message -->
          </div>

          <div>
            <label for="email" class="block text-gray-700">Email</label>
            <div
              id="email"
              class="w-full px-4 py-2 border border-gray-300 rounded-full bg-gray-100 text-gray-700"
            >
              <%= user.email %>
            </div>
          </div>

          <div>
            <label for="mobile" class="block text-gray-700">Mobile No.</label>
            <input
              type="text"
              id="mobile"
              name="mobile"
              value="<%= user.mobile || '' %>"
              class="w-full px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <span id="mobileError" class="text-red-500 text-sm"></span>
            <!-- Dynamic error message -->
          </div>
          <div>
            <button
              id="updateButton"
              class="w-full px-4 py-2 bg-black text-white rounded-full hover:bg-gray-800"
              onclick="updateProfile(event)"
            >
              Update
            </button>
          </div>
        </form>
      </div>
    </div>

    <script>
      // Function to validate Mobile Number (only numbers, exactly 10 digits)
      const validateMobile = (mobile) => {
        const mobileRegex = /^[0-9]{10}$/; // Ensure it's exactly 10 digits
        const mobileError = document.getElementById("mobileError");

        if (!mobile) {
          mobileError.textContent = "Mobile number cannot be blank.";
          return false;
        }
        if (!mobileRegex.test(mobile)) {
          mobileError.textContent = "Mobile number must be exactly 10 digits.";
          return false;
        }
        // Check for repeated digits (e.g., 0000000000, 5555555555)
        if (/^(\d)\1{9}$/.test(mobile)) {
          mobileError.textContent =
            "Mobile number cannot contain the same digit repeated 10 times.";
          return false;
        }

        mobileError.textContent = ""; // Clear error message when valid
        return true;
      };

      // Function to validate Full Name (only alphabets and spaces, no blanks)
      const validateFullName = (fullName) => {
        const fullNameRegex = /^[A-Za-z\s]+$/;
        const fullNameError = document.getElementById("fullNameError");

        if (!fullName) {
          fullNameError.textContent = "Full name cannot be blank.";
          return false;
        }
        if (!fullNameRegex.test(fullName)) {
          fullNameError.textContent = "Full name must only contain alphabets.";
          return false;
        }

        fullNameError.textContent = ""; // Clear error message when valid
        return true;
      };

      // Add event listeners to input fields for live validation
      document.getElementById("mobile").addEventListener("input", (e) => {
        const mobile = e.target.value;
        validateMobile(mobile);
      });

      document.getElementById("fullName").addEventListener("input", (e) => {
        const fullName = e.target.value;
        validateFullName(fullName);
      });

      // Update the submit button based on validation status
      const updateProfile = async (e) => {
        e.preventDefault(); // Prevent default form submission

        const fullName = document.getElementById("fullName").value.trim();
        const mobile = document.getElementById("mobile").value.trim();

        // Perform validation
        const isMobileValid = validateMobile(mobile);
        const isFullNameValid = validateFullName(fullName);

        if (!isMobileValid || !isFullNameValid) {
          return; // Stop execution if validation fails
        }

        try {
          // Send data to the server
          const response = await axios.post(
            "/user/profile",
            { fullName, mobile },
            { headers: { "Content-Type": "application/json" } }
          );

          // Display success message using SweetAlert
          Swal.fire({
            title: "Success!",
            text: response.data.message,
            icon: "success",
            confirmButtonText: "OK",
          });
        } catch (error) {
          console.error(
            "Error updating profile:",
            error.response?.data || error.message
          );
          // Display error message using SweetAlert
          Swal.fire({
            title: "Error!",
            text:
              error.response?.data?.error ||
              "Failed to update profile. Please try again.",
            icon: "error",
            confirmButtonText: "Retry",
          });
        }
      };
    </script>
  </body>
</html>
