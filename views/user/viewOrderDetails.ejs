<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>

    <%- include("partials/headerHTML") %>

</head>
</head>

<body class="bg-gray-50">
    <%- include("partials/navBar") %>
        <div class="mt-16"></div>

        <div class="flex min-h-screen bg-stone-100">
            <!-- Sidebar -->
            <div class="fixed bg-stone-100">
                <%- include("partials/userProfileSideBar") %>
            </div>

            <!-- Main Content -->
            <div class="flex-1 ml-64 bg-white p-6 shadow-md">
                <h1 class="text-2xl font-semibold text-gray-800 mb-6">Order Details</h1>
                <!-- Section 1: Order Information -->
                <div class="mb-6 border border-gray-300 rounded-lg bg-white p-6 shadow-md">
                    <p class="text-l font-semibold text-gray-800">Order ID: <span class="text-gray-800">
                            <%= order._id %>
                        </span></p>
                    <p class="text-sm text-gray-500">Order Date: <%= order.orderDate %>
                    </p>
                    <p class="text-sm text-gray-500">Payment Method: <%= order.paymentMethod %>
                    </p>
                    <p class="text-sm text-gray-500">Payment Status: <%= order.paymentStatus %>
                    </p>

                    <!-- Total Offer Redemption -->
                    <div class="mt-4">
                        <h3 class="text-lg font-semibold text-gray-800">Price Breakdown</h3>
                        <p class="text-sm text-gray-500">Subtotal: ₹<%= order.Subtotal.toLocaleString() %>
                        </p>
                        <% if(order.totalOfferValue) {%>
                            <p class="text-sm text-gray-500">Total Offer Redemption: ₹<%=
                                    order.totalOfferValue.toLocaleString() %>
                            </p>
                            <% } %>
                                <% if(order.totalCouponValue) {%>
                                    <p class="text-sm text-gray-500">Total Coupon Redemption: ₹<%=
                                            order.totalCouponValue.toLocaleString() %>
                                    </p>
                                    <% } %>
                                        <p class="text-lg font-semibold text-gray-800 mt-2">Total Amount: ₹<%=
                                                order.totalPrice.toLocaleString() %>
                                        </p>
                                        <% if (order.paymentMethod==='Online Payment' && order.paymentStatus==='Pending'
                                            ) { %>
                                            <button onclick="retryPayment('<%= order._id %>')"
                                                class="mt-6 w-1/6 bg-gray-800 hover:bg-gray-700 text-white text-sm py-2 rounded-md">
                                                Retry Payment
                                            </button>
                                            <% } %>



                                                <div class="mt-6">
                                                    <button onclick="downloadInvoice('<%= order._id %>')"
                                                        class="w-1/6 bg-black hover:bg-zinc-800 text-white text-sm py-2 rounded-md">
                                                        Download Invoice
                                                    </button>
                                                </div>

                    </div>

                </div>


                <!-- Section 2: Shipping Address -->
                <div class="mb-6 border border-gray-300 rounded-lg bg-white p-6 shadow-md">
                    <h2 class="text-xl font-semibold text-gray-800 mb-4">Shipping Address</h2>
                    <p class="text-sm text-gray-600">
                        <%= order.shippingAddress.name %>
                    </p>
                    <p class="text-sm text-gray-500">
                        <%= order.shippingAddress.street %>, <%= order.shippingAddress.city %>, <%=
                                    order.shippingAddress.state %> - <%= order.shippingAddress.zipCode %>
                    </p>
                    <p class="text-sm text-gray-500">Phone: <%= order.shippingAddress.phone %>
                    </p>
                </div>

                <!-- Section 3: Items -->
                <div>
                    <h2 class="text-xl font-semibold text-gray-800 mb-4">Items</h2>

                    <% order.items.forEach(item=> { %>
                        <div class="mb-6 border border-gray-300 rounded-lg bg-white p-4 shadow-md">
                            <div class="flex items-center">

                                <!-- 1st Section: Product Image -->
                                <div class="w-40 h-40">
                                    <img src="<%= item.imageUrl %>" alt="<%= item.productName %>"
                                        class="w-full h-full object-cover rounded-md border border-gray-200">
                                </div>

                                <!-- 2nd Section: Product Brand & Name -->
                                <div class="ml-16 flex-1">
                                    <p class="text-lg font-semibold text-gray-800">
                                        <%= item.brand + " " + item.productName %> <span
                                                class="text-gray-500 font-medium"></span>
                                    </p>
                                </div>

                                <!-- 3rd Section: Quantity -->
                                <div class="ml-4 flex-1">
                                    <p class="text-lg font-medium text-gray-600">Qty: <span class="text-gray-800">
                                            <%= item.quantity %>
                                        </span></p>
                                </div>

                                <!-- 4th Section: Price -->
                                <div class="ml-4 flex-1">
                                    <p class="text-lg font-medium text-gray-600">₹<%=
                                            item.itemTotalPrice.toLocaleString() %>
                                    </p>
                                    <% if (item.offerPercentage) { %>
                                        <p class="text-sm text-green-600">Offer: <%= item.offerPercentage %>% Off</p>
                                        <p class="text-sm text-green-600">Discount: ₹<%= (item.offerAmount *
                                                item.quantity).toLocaleString() %>
                                        </p>

                                        <% } %>
                                </div>

                                <!-- 5th Section: Status -->
                                <div class="ml-4 flex-1">
                                    <div>
                                        <% if (item.orderStatus==='Cancelled' ) { %>
                                            <span class="bg-red-100 text-red-600 text-sm px-2 py-1 rounded-md">Order <%=
                                                    item.orderStatus %></span>
                                            <% } else { %>
                                                <span
                                                    class="bg-green-100 text-green-600 text-sm px-2 py-1 rounded-md">Order
                                                    Status: <%= item.orderStatus %></span>
                                                <% } %>
                                    </div>
                                    <div></div>
                                    <!-- 6th Section: Cancel Button -->
                                    <% if (item.orderStatus==='Processing' || item.orderStatus==='Payment Pending' ) {
                                        %>
                                        <div class="mt-6 ml-10">
                                            <button
                                                class="cancel-btn text-sm px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-md"
                                                data-id="<%= item.orderItemId %>">
                                                Cancel
                                            </button>
                                        </div>
                                        <% } %>
                                            <% if (item.orderStatus==='Delivered' ) { %>
                                                <div class="mt-6 ml-10">
                                                    <button
                                                        class="return-btn text-sm px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-md"
                                                        data-id="<%= item.orderItemId %>">
                                                        Return
                                                    </button>
                                                </div>
                                                <% } %>
                                                    <% if (item.orderStatus==='Return-Requested' ) { %>
                                                        <div class="mt-6 ml-10">
                                                            <button
                                                                class="cancel-return-btn text-sm px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-md"
                                                                data-id="<%= item.orderItemId %>">
                                                                Cancel Return
                                                            </button>
                                                        </div>
                                                        <% } %>
                                </div>

                            </div>
                        </div>
                        <% }) %>
                </div>

            </div>

            <!-- ----------------------------------------- -->
            <!-- Return Reason Modal -->
            <div id="returnModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                <div class="bg-white p-6 rounded-md shadow-md w-96">
                    <h2 class="text-lg font-semibold text-gray-800 mb-4">Return Order</h2>
                    <textarea id="returnReason" class="w-full border border-gray-300 rounded-md p-2 text-sm" rows="4"
                        placeholder="Enter your return reason"></textarea>
                    <div class="flex justify-end gap-4 mt-4">
                        <button id="cancelReturn"
                            class="px-4 py-2 bg-gray-200 rounded-md text-gray-600 hover:bg-gray-300">Cancel</button>
                        <button id="submitReturn"
                            class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">Submit</button>
                    </div>
                </div>
            </div>




            <script>

                const notyf = new Notyf({
                    duration: 3000, // Notification duration in milliseconds
                    position: {
                        x: "right",
                        y: "bottom",
                    },
                });




                async function downloadInvoice(orderId) {
                    try {
                        const response = await fetch(`/user/order/downloadInvoice/${orderId}`);

                        if (response.ok) {
                            const blob = await response.blob(); // Get the response as a Blob
                            const url = window.URL.createObjectURL(blob);
                            const a = document.createElement("a");
                            a.href = url;
                            a.download = `invoice-${orderId}.pdf`; // Set the file name
                            document.body.appendChild(a);
                            a.click();
                            a.remove();
                            window.URL.revokeObjectURL(url);

                            // Show success message
                            Swal.fire({
                                icon: "success",
                                title: "Success",
                                text: "Invoice downloaded successfully.",
                                showConfirmButton: true,
                                confirmButtonText: "OK",
                            });
                        } else {
                            const errorData = await response.json();
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: errorData.message || "Failed to download invoice.",
                                showConfirmButton: true,
                                confirmButtonText: "OK",
                            });
                        }
                    } catch (error) {
                        console.error("Error downloading invoice:", error);
                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: "Something went wrong while downloading the invoice.",
                            showConfirmButton: true,
                            confirmButtonText: "OK",
                        });
                    }
                }



                // Cancel Order Item
                document.querySelectorAll('.cancel-btn').forEach((button) => {
                    button.addEventListener('click', async () => {
                        const orderItemId = button.dataset.id;

                        // Show SweetAlert confirmation dialog
                        const result = await Swal.fire({
                            title: 'Are you sure?',
                            text: "You won't be able to revert this!",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Yes, cancel it!'
                        });

                        if (result.isConfirmed) {
                            try {
                                // Make the API call to cancel the order
                                const response = await axios.post('/order/cancel', { orderItemId });

                                // Use SweetAlert to show a success popup
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Cancelled',
                                    text: response.data.message || 'Order cancelled successfully!',
                                    confirmButtonText: 'OK',
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        // Reload the page when the user clicks OK
                                        location.reload();
                                    }
                                });
                            } catch (error) {
                                // Use SweetAlert to show an error popup
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: error.response?.data?.message || 'Failed to cancel order.',
                                    confirmButtonText: 'OK',
                                });
                            }
                        }
                    });
                });


                // Return Order Item
                document.querySelectorAll('.return-btn').forEach(button => {
                    button.addEventListener('click', () => {
                        const orderItemId = button.dataset.id;
                        document.getElementById('returnModal').classList.remove('hidden');
                        document.getElementById('submitReturn').dataset.id = orderItemId;
                    });
                });

                // Submit Return Reason
                document.getElementById('submitReturn').addEventListener('click', async () => {
                    const orderItemId = document.getElementById('submitReturn').dataset.id;
                    const reason = document.getElementById('returnReason').value;

                    if (!reason.trim()) {
                        Swal.fire('Error', 'Please provide a return reason.', 'error');
                        return;
                    }

                    try {
                        const response = await axios.post('/order/return', { orderItemId, reason });

                        if (response.status === 200) {
                            Swal.fire({
                                title: 'Success!',
                                text: response.data.message || 'Return request submitted!',
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    location.reload(); // Reload the page after successful submission
                                }
                            });
                        } else {
                            Swal.fire('Error', response.data.message || 'Failed to submit return request.', 'error');
                        }
                    } catch (error) {
                        Swal.fire('Error', error.response?.data?.message || 'Failed to submit return request.', 'error');
                    }
                });



                document.querySelectorAll('.cancel-return-btn').forEach((button) => {
                    button.addEventListener('click', async () => {
                        const orderItemId = button.dataset.id;

                        // Show SweetAlert confirmation dialog
                        const result = await Swal.fire({
                            title: 'Are you sure?',
                            text: "This action will cancel the return request!",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Yes, cancel it!'
                        });

                        if (result.isConfirmed) {
                            try {
                                // Make the API call to cancel the return request
                                const response = await axios.post('/order/cancel-return', { orderItemId });

                                // Show success popup using SweetAlert
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Return Cancelled',
                                    text: response.data.message || 'Return request cancelled successfully!',
                                    confirmButtonText: 'OK',
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        // Reload the page
                                        location.reload();
                                    }
                                });
                            } catch (error) {
                                // Show error popup using SweetAlert
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: error.response?.data?.message || 'Failed to cancel return request.',
                                    confirmButtonText: 'OK',
                                });
                            }
                        }
                    });
                });


                // Cancel Modal
                document.getElementById('cancelReturn').addEventListener('click', () => {
                    document.getElementById('returnModal').classList.add('hidden');
                });



                function handleRazorpayPayment(order) {
                    const options = {
                        key: '<%= process.env.RAZORPAY_KEY_ID %>',
                        amount: order.amount,
                        currency: order.currency,
                        name: "Urbantick",
                        description: "Retry Payment",
                        order_id: order.id,
                        handler: function (response) {
                            verifyPayment(response, order);
                        },
                        prefill: {
                            name: "<%= user.fullName %>",
                            email: "<%= user.email %>",
                            contact: "<%= user.phone %>",
                        },
                        theme: {
                            color: "#3399cc",
                        },
                    };

                    const rzp = new Razorpay(options);
                    rzp.open();

                    rzp.on("payment.failed", function (response) {
                        Swal.fire({
                            icon: "error",
                            title: "Payment Failed",
                            text: response.error.description || "Retry payment failed. Please try again.",
                        }).then(() => {
                            window.location.reload();
                        });
                    });
                }

                async function verifyPayment(paymentResponse, order) {
                    try {
                        const response = await fetch('/user/order/verify-payment', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ paymentResponse, order })
                        });

                        const result = await response.json();

                        if (result.success) {
                            Swal.fire({
                                icon: "success",
                                title: "Payment Successful",
                                text: "Your payment has been retried successfully!",
                                showConfirmButton: true,
                                confirmButtonText: "OK",
                            }).then(() => {
                                window.location.reload();
                            });
                        } else {
                            Swal.fire('Error', result.message || 'Payment verification failed. Please try again.', 'error');
                        }
                    } catch (error) {
                        console.error("Error verifying retry payment:", error);
                        Swal.fire('Error', 'An error occurred while verifying your retry payment. Please contact support.', 'error');
                    }
                }


                function retryPayment(orderId) {
                    fetch(`/user/order/retry-payment/${orderId}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                console.log(55555);
                                console.log(data.order);
                                handleRazorpayPayment(data.order); // Trigger Razorpay payment handler
                            } else {
                                Swal.fire("Error", data.message || "Unable to process retry payment request.", "error");
                            }
                        })
                        .catch(error => {
                            console.error("Error retrying payment:", error);
                            Swal.fire("Error", "An error occurred while retrying payment. Please contact support.", "error");
                        });
                }


                async function placeOrder() {
                    const selectedAddress = document.querySelector("input[name='selectedAddress']:checked")?.value;
                    const paymentMethod = document.querySelector("input[name='paymentMethod']:checked")?.value;

                    if (!selectedAddress || !paymentMethod) {
                        Swal.fire("Error", "Please select an address and payment method.", "error");
                        return;
                    }

                    try {
                        const response = await axios.post("/user/checkout", {
                            selectedAddress,
                            paymentMethod,
                            appliedCouponCode: selectedCouponCode,
                        });

                        if (response.status === 200) {
                            const data = response.data;

                            if (paymentMethod === "Online Payment") {
                                handleRazorpayPayment(data.order);
                            } else if (paymentMethod === "Cash on Delivery") {
                                Swal.fire({
                                    icon: "success",
                                    title: "Order Placed!",
                                    text: data.message,
                                    showConfirmButton: true,
                                    confirmButtonText: "OK",
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        window.location.href = "/user/orders";
                                    }
                                });
                            }
                        }
                    } catch (error) {
                        console.error("Error placing order:", error);

                        // Check if error response contains the correct key 'error'
                        const errorMessage =
                            error.response?.data?.error || "An error occurred while placing the order.";

                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: errorMessage,
                        });


                    }

                }


            </script>
</body>

</html>